// Приведите пример реализации принципа инкапсуляции
// Ваш пример инкапсуляции, ее полезности или вреда

// Преимущества инкапсуляции в данном примере:

// Скрытие реализации: Поля make, model и year объявлены как приватные, что скрывает их реализацию от внешнего кода. Внешний код может получить доступ к значениям только через геттеры.
// Контроль доступа: Геттеры предоставляют контролируемый доступ к приватным полям, а сеттер setMake демонстрирует, как можно добавить проверки при установке нового значения.
// Упрощение сопровождения: Если в будущем потребуется изменить внутреннюю реализацию класса (например, изменить тип данных поля), это можно сделать без влияния на внешний код, который использует геттеры и сеттеры.

// Недостатки инкапсуляции в данном контексте:

// Дополнительный код: Использование геттеров и сеттеров требует написания дополнительного кода, что может увеличить объем кода.
// Иногда избыточно: В некоторых случаях инкапсуляция может показаться избыточной, особенно для простых классов.

public class Car {
    // Приватные поля
    private String make;
    private String model;
    private int year;

    // Конструктор класса
    public Car(String make, String model, int year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    // Геттеры для доступа к приватным полям
    public String getMake() {
        return make;
    }

    public String getModel() {
        return model;
    }

    public int getYear() {
        return year;
    }

    // Метод для отображения информации
    public void displayInfo() {
        System.out.println(year + " " + make + " " + model);
    }

    // Пример использования инкапсуляции для изменения данных
    public void setMake(String make) {
        if (make != null && !make.isEmpty()) {
            this.make = make;
        } else {
            System.out.println("Некорректное значение для производителя");
        }
    }
}
// В целом, инкапсуляция в Java помогает обеспечить безопасность и управление доступом к данным объекта, что улучшает модульность и облегчает сопровождение кода.
